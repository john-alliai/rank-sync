---
export interface PricingFeature {
  text: string;
}

export interface Props {
  plans: Array<{
    name: string;
    price: string;
    interval: string;
    features: string[];
    ctaText: string;
    ctaLink: string;
    trialText?: string;
  }>;
  background?: 'dark' | 'dark-surface';
}

const { plans, background = 'dark-surface' } = Astro.props;
const bgClass = background === 'dark-surface' ? 'bg-dark-surface' : 'bg-dark';
---

<section class={`py-20 ${bgClass}`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="grid grid-cols-1 md:grid-cols-3 gap-8">
      {plans.map((plan) => (
        <div class="rounded-xl shadow-lg overflow-hidden animate-fade-in h-full flex flex-col">
          <div class="px-6 py-8 bg-dark sm:p-10 sm:pb-6 flex-grow">
            <div class="flex justify-center">
              <span class="inline-flex px-4 py-1 rounded-full text-sm font-semibold tracking-wide uppercase bg-electric-cyan/10 text-electric-cyan">
                {plan.name}
              </span>
            </div>
            <div class="mt-4 flex justify-center text-6xl font-extrabold text-white">
              ${plan.price}
              <span class="ml-1 text-2xl font-medium text-gray-400">/{plan.interval}</span>
            </div>
            <ul class="mt-8 space-y-4 min-h-[200px]">
              {plan.features.map((feature) => (
                <li class="flex items-center text-gray-300">
                  <svg class="flex-shrink-0 h-6 w-6 text-electric-cyan" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7" />
                  </svg>
                  <span class="ml-3">{feature}</span>
                </li>
              ))}
            </ul>
          </div>
          <div class="px-6 py-8 bg-dark-surface border-t border-gray-800 sm:px-10 sm:py-6">
            <a 
              href={plan.ctaLink}
              class="block w-full px-4 py-2 border border-transparent rounded-xl shadow-sm text-sm font-medium text-dark bg-electric-cyan hover:bg-electric-cyan/90 transition-all transform hover:scale-105 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-electric-cyan focus:ring-offset-dark text-center"
            >
              {plan.ctaText}
            </a>
            {plan.trialText && (
              <p class="mt-4 text-sm text-center text-gray-500">
                {plan.trialText}
              </p>
            )}
          </div>
        </div>
      ))}
    </div>
  </div>
</section>

<style>
  @keyframes fade-in {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .animate-fade-in {
    opacity: 0;
    animation: fade-in 0.6s ease-out forwards;
  }
</style>