---
export interface Feature {
  title: string;
  description: string;
  icon?: string;
}

export interface Props {
  title?: string;
  subtitle?: string;
  features: Feature[];
  layout?: 'grid' | 'list';
  columns?: number;
}

const { 
  title, 
  subtitle, 
  features, 
  layout = 'list',
  columns = 2 
} = Astro.props;

const layoutClass = layout === 'grid' 
  ? `grid md:grid-cols-${columns} lg:grid-cols-${Math.min(features.length, 4)} gap-8`
  : `grid md:grid-cols-${columns} gap-8 text-left`;
---

<section class="py-16 px-4 max-w-4xl mx-auto text-center">
  {title && (
    <h2 class="text-3xl md:text-4xl font-bold mb-4 text-white">
      {title}
    </h2>
  )}
  
  {subtitle && (
    <p class="text-lg text-gray-300 mb-8 font-medium">
      {subtitle}
    </p>
  )}
  
  <div class={layoutClass}>
    {features.map((feature) => (
      <div class={layout === 'grid' ? 'bg-dark-surface p-6 rounded-xl shadow-lg text-center' : ''}>
        {layout === 'grid' && feature.icon && (
          <div class="text-3xl mb-4">{feature.icon}</div>
        )}
        
        {layout === 'list' ? (
          <div class="space-y-3">
            <div class="flex items-start">
              <span class="font-bold text-electric-cyan mr-3">•</span>
              <div>
                <span class="font-bold text-white">{feature.title}</span>
                {feature.description && (
                  <span class="text-gray-300"> – {feature.description}</span>
                )}
              </div>
            </div>
          </div>
        ) : (
          <>
            <h3 class="text-xl font-semibold mb-2 text-white">{feature.title}</h3>
            <p class="text-gray-400">{feature.description}</p>
          </>
        )}
      </div>
    ))}
  </div>
</section> 