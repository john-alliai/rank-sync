---
export interface Button {
  text: string;
  href?: string;
  variant?: 'primary' | 'secondary';
}

export interface Props {
  title: string;
  subtitle?: string;
  buttons?: Button[];
  background?: 'dark' | 'gradient';
  size?: 'default' | 'large';
}

const { 
  title, 
  subtitle, 
  buttons = [],
  background = 'dark',
  size = 'default'
} = Astro.props;

const bgClass = background === 'gradient' 
  ? 'bg-gradient-to-br from-dark to-dark-surface' 
  : 'bg-dark';

const paddingClass = size === 'large' ? 'py-40' : 'py-24';
const titleSizeClass = size === 'large' 
  ? 'text-4xl md:text-5xl lg:text-6xl' 
  : 'text-4xl md:text-6xl';
---

<section class={`${bgClass} text-white ${paddingClass}`}>
  <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
    <div class="text-center">
      <h1 class={`${titleSizeClass} font-extrabold tracking-tight mb-4`}>
        {title}
      </h1>
      
      {subtitle && (
        <p class="mt-6 text-xl md:text-2xl max-w-3xl mx-auto text-gray-300 mb-8">
          {subtitle}
        </p>
      )}
      
      {buttons.length > 0 && (
        <div class="flex flex-col sm:flex-row justify-center gap-4 mt-10">
          {buttons.map((button) => {
            const isSecondary = button.variant === 'secondary';
            const buttonClass = isSecondary
              ? 'px-8 py-3 border-2 border-electric-cyan text-electric-cyan rounded-xl font-semibold hover:bg-electric-cyan/10 transition-all'
              : 'px-8 py-3 bg-electric-cyan text-dark rounded-xl font-semibold hover:bg-electric-cyan/90 transition-all transform hover:scale-105';
            
            return (
              <a href={button.href || '#'} class={buttonClass}>
                {button.text}
              </a>
            );
          })}
        </div>
      )}
    </div>
  </div>
</section> 